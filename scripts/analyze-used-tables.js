#!/usr/bin/env node

/**
 * Analyzes which database tables are actually used in the codebase
 * and helps maintain the BarberShopTables type subset
 */

import fs from 'fs';
import path from 'path';
import glob from 'glob';

const SRC_DIR = 'src';

// Tables found through analysis
const KNOWN_TABLES = [
  'branches', 'marketing_files', 'ui_elements', 'employees', 'qr_scans',
  'qr_scan_counts_daily', 'qr_codes'
];

function findUsedTables() {
  return new Promise((resolve, reject) => {
    glob('src/**/*.{ts,tsx}', { cwd: process.cwd() }, (err, files) => {
      if (err) {
        reject(err);
        return;
      }

      const usedTables = new Set();
      const patterns = [
        /\.from\(['"]([^'"]+)['"]\)/g,
        /\.table\(['"]([^'"]+)['"]\)/g,
        /Tables<['"]([^'"]+)['"]>/g,
        /Database\['public'\]\['Tables'\]\['([^']+)'\]/g
      ];

      for (const file of files) {
        const content = fs.readFileSync(file, 'utf-8');

        patterns.forEach(pattern => {
          let match;
          while ((match = pattern.exec(content)) !== null) {
            usedTables.add(match[1]);
          }
        });
      }

      resolve(Array.from(usedTables).sort());
    });
  });
}

function generateTypeScript(types) {
  const typeUnion = types.map(t => `  | '${t}'`).join('\n');

  return `// === AUTO-GENERATED BARBER SHOP TABLES ===
// Generated by: npm run analyze-tables
// Last updated: ${new Date().toISOString()}

export type BarberShopTables =
${typeUnion};
`;
}

async function main() {
  console.log('🔍 Analyzing used database tables...\n');

  const usedTables = await findUsedTables();

  console.log('📊 Tables found in codebase:');
  usedTables.forEach(table => {
    const isKnown = KNOWN_TABLES.includes(table);
    console.log(`  ${isKnown ? '✅' : '🆕'} ${table}`);
  });

  console.log(`\n📈 Total tables used: ${usedTables.length}`);

  const newTables = usedTables.filter(t => !KNOWN_TABLES.includes(t));
  if (newTables.length > 0) {
    console.log('\n🆕 New tables found (not in current BarberShopTables):');
    newTables.forEach(table => console.log(`  - ${table}`));
    console.log('\n💡 Consider updating BarberShopTables in src/types/supabase.ts');
  }

  const unusedTables = KNOWN_TABLES.filter(t => !usedTables.includes(t));
  if (unusedTables.length > 0) {
    console.log('\n⚠️  Tables in BarberShopTables but not found in code:');
    unusedTables.forEach(table => console.log(`  - ${table}`));
    console.log('\n💡 Consider removing these from BarberShopTables');
  }

  console.log('\n📄 Generated TypeScript:');
  console.log(generateTypeScript(usedTables));
}

main().catch(console.error);
